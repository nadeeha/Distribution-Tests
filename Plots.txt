import streamlit as st
import pandas as pd
import plotly.express as px

# Sample data (replace this with your actual DataFrame)
data = {
    'iea_name': ['IEA1', 'IEA2', 'IEA1', 'IEA3', 'IEA2', 'IEA3'],
    'rbics_L6_name': ['RBICS1', 'RBICS2', 'RBICS1', 'RBICS3', 'RBICS2', 'RBICS3'],
    'relevance_flag': ['high', 'moderate', 'low', 'high', 'moderate', 'low'],
    'combined_similarity_score': [0.85, 0.65, 0.92, 0.78, 0.58, 0.45]
}

df = pd.DataFrame(data)

# Expand the display to fit screen size
st.set_page_config(layout="wide")

# Display total number of unique iea_names
unique_iea_names = df['iea_name'].nunique()
st.write(f"Total number of unique IEA names: {unique_iea_names}")

# Interactive bar plot for relevance_flag counts with Plotly
def plot_relevance_flag_counts(df):
    fig = px.histogram(df, x="relevance_flag", color="relevance_flag",
                       color_discrete_map={"high": "lightgreen", "moderate": "yellow", "low": "lightcoral"},
                       title="Relevance Flag Distribution", labels={"relevance_flag": "Relevance Flag", "count": "Count"})

    # Add thresholds as an annotation in the plot
    thresholds_text = "Thresholds:\nHigh: >= 0.75\nModerate: 0.6 - 0.75\nLow: < 0.6"
    fig.add_annotation(
        text=thresholds_text,
        xref="paper", yref="paper",
        x=1.15, y=0.5,
        showarrow=False,
        font=dict(size=12),
        bgcolor="white",
        bordercolor="black"
    )
    
    fig.update_layout(width=800, height=500)  # Increase plot size for better display
    st.plotly_chart(fig)

# Streamlit app layout
st.title("Dataframe with Filters and Conditional Formatting")

# Filter widget for iea_name (default all values)
iea_name_selection = st.selectbox("Select IEA Name", options=["All"] + list(df['iea_name'].unique()))

# Apply filter if a specific IEA name is selected
if iea_name_selection != "All":
    filtered_df = df[df['iea_name'] == iea_name_selection]
else:
    filtered_df = df

# Conditional formatting for relevance_flag column
def highlight_relevance_flag(row):
    color = 'lightgreen' if row['relevance_flag'] == 'high' else 'yellow' if row['relevance_flag'] == 'moderate' else 'lightcoral'
    return ['background-color: {}'.format(color) if col == 'relevance_flag' else '' for col in row.index]

# Display the filtered DataFrame with conditional formatting
st.write("Filtered Data:")
styled_df = filtered_df.style.apply(highlight_relevance_flag, axis=1)
st.dataframe(styled_df)

# Display the interactive bar plot for relevance_flag
st.write("Relevance Flag Distribution:")
plot_relevance_flag_counts(filtered_df)
