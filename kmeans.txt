from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import DBSCAN
from sklearn.manifold import TSNE
from sklearn.metrics import silhouette_score

# Step 1: Load and Prepare Data
iris = load_iris()
X = iris.data

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 2: Apply Clustering (DBSCAN - No need for specifying number of clusters)
dbscan = DBSCAN(eps=0.5, min_samples=5)
clusters = dbscan.fit_predict(X_scaled)

# Optional: Check the number of clusters found
n_clusters = len(set(clusters)) - (1 if -1 in clusters else 0)
print(f"Number of clusters found: {n_clusters}")

# Optional: Silhouette Score for DBSCAN
if len(set(clusters)) > 1:  # More than 1 cluster, as Silhouette is undefined for 1 cluster
    sil_score = silhouette_score(X_scaled, clusters)
    print(f"Silhouette Score: {sil_score}")

# Step 3: Dimensionality Reduction (t-SNE)
tsne = TSNE(n_components=2, random_state=42)
X_tsne = tsne.fit_transform(X_scaled)

# Step 4: Visualization
plt.figure(figsize=(10, 6))
scatter = plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=clusters, cmap='viridis', s=100, alpha=0.7)
plt.title("t-SNE Visualization of Clusters")
plt.xlabel("t-SNE Feature 1")
plt.ylabel("t-SNE Feature 2")
plt.colorbar(scatter, label='Cluster Label')
plt.grid(True)
plt.show()


# Step 2: Estimating optimal number of clusters using Elbow Method or Silhouette Score
def estimate_optimal_clusters(X, max_k=10):
    inertias = []
    sil_scores = []
    for k in range(2, max_k):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(X)
        inertias.append(kmeans.inertia_)
        sil_scores.append(silhouette_score(X, kmeans.labels_))
    
    # Plot Elbow Method (Inertia)
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.plot(range(2, max_k), inertias, marker='o')
    plt.title("Elbow Method")
    plt.xlabel("Number of clusters (k)")
    plt.ylabel("Inertia")
    
    # Plot Silhouette Score
    plt.subplot(1, 2, 2)
    plt.plot(range(2, max_k), sil_scores, marker='o', color='green')
    plt.title("Silhouette Score")
    plt.xlabel("Number of clusters (k)")
    plt.ylabel("Silhouette Score")
    
    plt.show()

    optimal_k = sil_scores.index(max(sil_scores)) + 2  # +2 because range starts at 2
    print(f"Optimal number of clusters based on Silhouette Score: {optimal_k}")
    return optimal_k

# Estimate the number of clusters
optimal_clusters = estimate_optimal_clusters(X_scaled)

# Step 3: Apply K-Means with estimated clusters
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Step 4: Apply Dimensionality Reduction and Visualization
X_tsne = TSNE(n_components=2, random_state=42).fit_transform(X_scaled)
plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=clusters, cmap='viridis', s=100, alpha=0.7)
plt.title("t-SNE with K-Means Clusters")
plt.show()
