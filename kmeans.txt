from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

# Step 2: Estimating optimal number of clusters using Elbow Method or Silhouette Score
def estimate_optimal_clusters(X, max_k=10):
    inertias = []
    sil_scores = []
    for k in range(2, max_k):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(X)
        inertias.append(kmeans.inertia_)
        sil_scores.append(silhouette_score(X, kmeans.labels_))
    
    # Plot Elbow Method (Inertia)
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.plot(range(2, max_k), inertias, marker='o')
    plt.title("Elbow Method")
    plt.xlabel("Number of clusters (k)")
    plt.ylabel("Inertia")
    
    # Plot Silhouette Score
    plt.subplot(1, 2, 2)
    plt.plot(range(2, max_k), sil_scores, marker='o', color='green')
    plt.title("Silhouette Score")
    plt.xlabel("Number of clusters (k)")
    plt.ylabel("Silhouette Score")
    
    plt.show()

    optimal_k = sil_scores.index(max(sil_scores)) + 2  # +2 because range starts at 2
    print(f"Optimal number of clusters based on Silhouette Score: {optimal_k}")
    return optimal_k

# Estimate the number of clusters
optimal_clusters = estimate_optimal_clusters(X_scaled)

# Step 3: Apply K-Means with estimated clusters
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Step 4: Apply Dimensionality Reduction and Visualization
X_tsne = TSNE(n_components=2, random_state=42).fit_transform(X_scaled)
plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=clusters, cmap='viridis', s=100, alpha=0.7)
plt.title("t-SNE with K-Means Clusters")
plt.show()
