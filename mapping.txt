import pandas as pd
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

# Load data (adjust file paths as needed)
df_iea_test = pd.read_csv('iea_technology_activities.csv')
df_rbics_matrix_test = pd.read_csv('rbics_revenue.csv')

# Initialize embedding model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Combine text columns and avoid setting-with-copy warnings
df_iea_test = df_iea_test.copy()
df_rbics_matrix_test = df_rbics_matrix_test.copy()
df_iea_test['combined_text'] = df_iea_test[['name', 'description', 'NZErationale', 'SupplyChain', 'theme']].fillna('').agg(' '.join, axis=1)
df_rbics_matrix_test['combined_text'] = df_rbics_matrix_test[['L6_NAME', 'L6_DESCRIPTION']].fillna('').agg(' '.join, axis=1)

# Generate embeddings and calculate similarity matrix
iea_embeddings = model.encode(df_iea_test['combined_text'].tolist(), convert_to_tensor=True)
rbics_embeddings = model.encode(df_rbics_matrix_test['combined_text'].tolist(), convert_to_tensor=True)

# Print shapes to verify sizes
print("IEA Embedding Shape:", iea_embeddings.shape)
print("RBICS Embedding Shape:", rbics_embeddings.shape)

similarity_matrix = cosine_similarity(iea_embeddings, rbics_embeddings)
print("Similarity Matrix Shape:", similarity_matrix.shape)

# Check that similarity matrix dimensions match
if similarity_matrix.shape[0] != len(df_iea_test) or similarity_matrix.shape[1] != len(df_rbics_matrix_test):
    raise ValueError("Mismatch between similarity matrix dimensions and dataframes. Check your embeddings.")

# Function to assign flags
def assign_flag(similarity_score):
    if similarity_score >= 0.8:
        return "High"
    elif similarity_score >= 0.6:
        return "Moderate"
    else:
        return "Low"

# Map each IEA category to all RBICS categories, including flags
mapping_results = []
for i, iea_row in df_iea_test.iterrows():
    for j, rbics_row in df_rbics_matrix_test.iterrows():
        similarity_score = similarity_matrix[i, j]
        flag = assign_flag(similarity_score)
        mapping_results.append({
            'iea_id': iea_row['name'],
            'rbics_id': rbics_row['L6_NAME'],
            'iea_description': iea_row['combined_text'],
            'rbics_description': rbics_row['combined_text'],
            'similarity_score': similarity_score,
            'relevance_flag': flag
        })

# Convert to DataFrame and save results
mapping_df = pd.DataFrame(mapping_results)
mapping_df.to_csv('iea_rbics_mapping_with_flags.csv', index=False)
print(mapping_df.head())
