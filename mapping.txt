import pandas as pd
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

# Load your data (replace these with actual paths or data loading method)
df_iea_test = pd.read_csv('iea_technology_activities.csv')  # Expected 5 rows based on similarity matrix
df_rbics_matrix_test = pd.read_csv('rbics_revenue.csv')  # Expected 43 rows based on similarity matrix

# Initialize embedding model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Combine text columns to create a consolidated text for comparison
df_iea_test['combined_text'] = df_iea_test[['name', 'description', 'NZErationale', 'SupplyChain', 'theme']].fillna('').agg(' '.join, axis=1)
df_rbics_matrix_test['combined_text'] = df_rbics_matrix_test[['L6_NAME', 'L6_DESCRIPTION']].fillna('').agg(' '.join, axis=1)

# Generate embeddings and calculate similarity matrix
iea_embeddings = model.encode(df_iea_test['combined_text'].tolist(), convert_to_tensor=True)
rbics_embeddings = model.encode(df_rbics_matrix_test['combined_text'].tolist(), convert_to_tensor=True)

# Print shapes to verify sizes
print("IEA Embedding Shape:", iea_embeddings.shape)
print("RBICS Embedding Shape:", rbics_embeddings.shape)

similarity_matrix = cosine_similarity(iea_embeddings, rbics_embeddings)
print("Similarity Matrix Shape:", similarity_matrix.shape)

# Function to assign flags based on similarity score
def assign_flag(similarity_score):
    if similarity_score >= 0.8:
        return "High"
    elif similarity_score >= 0.6:
        return "Moderate"
    else:
        return "Low"

# Create a list to store the mappings
mapping_results = []

# Limit iteration based on similarity matrix dimensions
num_iea = similarity_matrix.shape[0]  # Should match the number of rows in df_iea_test
num_rbics = similarity_matrix.shape[1]  # Should match the number of rows in df_rbics_matrix_test

# Map each IEA category to all RBICS categories, including flags
for i in range(num_iea):
    iea_row = df_iea_test.iloc[i]
    for j in range(num_rbics):
        rbics_row = df_rbics_matrix_test.iloc[j]
        similarity_score = similarity_matrix[i, j]
        flag = assign_flag(similarity_score)
        mapping_results.append({
            'iea_id': iea_row['name'],
            'rbics_id': rbics_row['L6_NAME'],
            'iea_description': iea_row['combined_text'],
            'rbics_description': rbics_row['combined_text'],
            'similarity_score': similarity_score,
            'relevance_flag': flag
        })

# Convert the mappings to a DataFrame and save or display
mapping_df = pd.DataFrame(mapping_results)
mapping_df = mapping_df.sort_values(by='similarity_score', ascending=False)
mapping_df.to_csv('iea_rbics_mapping_with_flags.csv', index=False)

print(mapping_df.head())
