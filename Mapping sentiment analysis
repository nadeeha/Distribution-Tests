from anytree import Node, RenderTree
from anytree.exporter import DotExporter

# Root of the tree
root = Node("Circular Economy")

# Dictionary to track created nodes
node_lookup = {}

# Iterate through each row
for _, row in df_CE_Final.iterrows():
    l1 = row['L1']
    l2 = row['L2']
    l3 = row['L3']
    l6 = row['L6_NAME']

    # Create or fetch L1 node
    if l1 not in node_lookup:
        node_lookup[l1] = Node(l1, parent=root)

    # Create or fetch L2 node
    l2_key = (l1, l2)
    if l2_key not in node_lookup:
        node_lookup[l2_key] = Node(l2, parent=node_lookup[l1])

    # Handle L3 (if absent, treat L6_NAME as L3)
    if pd.notna(l3):
        l3_key = (l1, l2, l3)
        if l3_key not in node_lookup:
            node_lookup[l3_key] = Node(l3, parent=node_lookup[l2_key])
        Node(l6, parent=node_lookup[l3_key])
    else:
        # Use L6_NAME as L3
        l3_key = (l1, l2, l6)
        if l3_key not in node_lookup:
            node_lookup[l3_key] = Node(l6, parent=node_lookup[l2_key])

# Print the tree
for pre, fill, node in RenderTree(root):
    print(f"{pre}{node.name}")






import networkx as nx
import matplotlib.pyplot as plt

def build_graph(node, graph=None, parent=None):
    if graph is None:
        graph = nx.DiGraph()
    graph.add_node(node.name)
    if parent:
        graph.add_edge(parent.name, node.name)
    for child in node.children:
        build_graph(child, graph, node)
    return graph

# Build and plot the graph
G = build_graph(root)

plt.figure(figsize=(12, 10))
pos = nx.spring_layout(G, k=0.5, iterations=100)
nx.draw(G, pos, with_labels=True, arrows=False, node_size=1500, node_color="lightblue", font_size=10)
plt.title("Circular Economy Taxonomy Tree")
plt.show()
