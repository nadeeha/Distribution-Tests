from anytree import Node, RenderTree
from anytree.exporter import DotExporter

# Root of the tree
root = Node("Circular Economy")

# Dictionary to track created nodes
node_lookup = {}

# Iterate through each row
for _, row in df_CE_Final.iterrows():
    l1 = row['L1']
    l2 = row['L2']
    l3 = row['L3']
    l6 = row['L6_NAME']

    # Create or fetch L1 node
    if l1 not in node_lookup:
        node_lookup[l1] = Node(l1, parent=root)

    # Create or fetch L2 node
    l2_key = (l1, l2)
    if l2_key not in node_lookup:
        node_lookup[l2_key] = Node(l2, parent=node_lookup[l1])

    # Handle L3 (if absent, treat L6_NAME as L3)
    if pd.notna(l3):
        l3_key = (l1, l2, l3)
        if l3_key not in node_lookup:
            node_lookup[l3_key] = Node(l3, parent=node_lookup[l2_key])
        Node(l6, parent=node_lookup[l3_key])
    else:
        # Use L6_NAME as L3
        l3_key = (l1, l2, l6)
        if l3_key not in node_lookup:
            node_lookup[l3_key] = Node(l6, parent=node_lookup[l2_key])

# Print the tree
for pre, fill, node in RenderTree(root):
    print(f"{pre}{node.name}")






import networkx as nx
import matplotlib.pyplot as plt

def build_graph(node, graph=None, parent=None):
    if graph is None:
        graph = nx.DiGraph()
    graph.add_node(node.name)
    if parent:
        graph.add_edge(parent.name, node.name)
    for child in node.children:
        build_graph(child, graph, node)
    return graph

# Build and plot the graph
G = build_graph(root)

plt.figure(figsize=(12, 10))
pos = nx.spring_layout(G, k=0.5, iterations=100)
nx.draw(G, pos, with_labels=True, arrows=False, node_size=1500, node_color="lightblue", font_size=10)
plt.title("Circular Economy Taxonomy Tree")
plt.show()








import networkx as nx
import matplotlib.pyplot as plt

def build_graph(node, graph=None, parent=None):
    if graph is None:
        graph = nx.DiGraph()
    graph.add_node(node.name)
    if parent:
        graph.add_edge(parent.name, node.name)
    for child in node.children:
        build_graph(child, graph, node)
    return graph

def hierarchy_pos(G, root, width=1.0, vert_gap=0.3, vert_loc=0, xcenter=0.5, pos=None, parent=None):
    """Recursively positions nodes in a hierarchy layout"""
    if pos is None:
        pos = {}
    children = list(G.successors(root))
    if not children:
        pos[root] = (xcenter, vert_loc)
    else:
        dx = width / len(children)
        next_x = xcenter - width/2 - dx/2
        for child in children:
            next_x += dx
            pos = hierarchy_pos(G, child, width=dx, vert_gap=vert_gap,
                                vert_loc=vert_loc - vert_gap, xcenter=next_x,
                                pos=pos, parent=root)
        pos[root] = (xcenter, vert_loc)
    return pos

# Build the graph from your anytree structure
G = build_graph(root)

# Create a hierarchical position layout
pos = hierarchy_pos(G, "Circular Economy")

# Plot using matplotlib
plt.figure(figsize=(15, 12))
nx.draw(G, pos, with_labels=True, arrows=False,
        node_size=2000, node_color="lightblue", font_size=9)
plt.title("Circular Economy Taxonomy Tree (Hierarchical View)", fontsize=14)
plt.axis('off')
plt.show()









import plotly.express as px

# Create a copy to work on
df_plot = df_CE_Final.copy()

# If L3 is missing, use L6_NAME as L3
df_plot['L3_clean'] = df_plot.apply(lambda row: row['L3'] if pd.notna(row['L3']) else row['L6_NAME'], axis=1)

# Create a path for the hierarchy: Root → L1 → L2 → L3 (or L6)
df_plot['Circular Economy'] = 'Circular Economy'  # Root
fig = px.treemap(
    df_plot,
    path=['Circular Economy', 'L1', 'L2', 'L3_clean', 'L6_NAME'],
    values=None,  # optional: you can use a count or relevance score if available
    title='Circular Economy Taxonomy Tree (Interactive Treemap)',
)

fig.update_traces(root_color="lightgrey")
fig.update_layout(margin=dict(t=50, l=25, r=25, b=25))
fig.show()







import plotly.graph_objects as go
from anytree import LevelOrderIter

# Traverse the anytree to collect nodes and edges
nodes = []
edges = []

# Assign unique IDs to nodes
node_ids = {}
for i, node in enumerate(LevelOrderIter(root)):
    node_ids[node] = f"id_{i}"
    nodes.append(node)

    if node.parent:
        edges.append((node_ids[node.parent], node_ids[node]))

# Assign x, y coordinates based on depth and order
positions = {}
level_counts = {}

for node in LevelOrderIter(root):
    level = node.depth
    count = level_counts.get(level, 0)
    positions[node_ids[node]] = (count, -level)
    level_counts[level] = count + 1

# Create node traces
node_x, node_y, node_text = [], [], []
for node in nodes:
    nid = node_ids[node]
    x, y = positions[nid]
    node_x.append(x)
    node_y.append(y)
    node_text.append(node.name)

# Create edge traces
edge_x, edge_y = [], []
for parent_id, child_id in edges:
    x0, y0 = positions[parent_id]
    x1, y1 = positions[child_id]
    edge_x += [x0, x1, None]
    edge_y += [y0, y1, None]

# Plot with Plotly
fig = go.Figure()

# Edges
fig.add_trace(go.Scatter(
    x=edge_x, y=edge_y,
    mode='lines',
    line=dict(width=1, color='gray'),
    hoverinfo='none'
))

# Nodes
fig.add_trace(go.Scatter(
    x=node_x, y=node_y,
    mode='markers+text',
    marker=dict(size=40, color='lightblue'),
    text=node_text,
    textposition="middle center",
    hoverinfo='text'
))

fig.update_layout(
    title="Circular Economy - Decision Tree Style (Plotly)",
    showlegend=False,
    xaxis=dict(showticklabels=False, zeroline=False),
    yaxis=dict(showticklabels=False, zeroline=False),
    margin=dict(l=20, r=20, t=50, b=20),
    height=800
)

fig.show()


_______

import plotly.graph_objects as go
from anytree import LevelOrderIter
from collections import defaultdict

# Step 1: Build node list and edges from anytree
nodes = []
edges = []
node_ids = {}
for i, node in enumerate(LevelOrderIter(root)):
    node_ids[node] = f"id_{i}"
    nodes.append(node)
    if node.parent:
        edges.append((node_ids[node.parent], node_ids[node]))

# Step 2: Group nodes by level (depth) to assign x-positions
levels = defaultdict(list)
for node in nodes:
    levels[node.depth].append(node)

# Step 3: Assign positions (x evenly spaced within each level, y by depth)
positions = {}
for depth, level_nodes in levels.items():
    for i, node in enumerate(level_nodes):
        x = i - len(level_nodes) / 2  # Center horizontally
        y = -depth  # Top-down layout
        positions[node_ids[node]] = (x, y)

# Step 4: Plot with Plotly
# Edges
edge_x, edge_y = [], []
for parent_id, child_id in edges:
    x0, y0 = positions[parent_id]
    x1, y1 = positions[child_id]
    edge_x += [x0, x1, None]
    edge_y += [y0, y1, None]

# Nodes
node_x, node_y, node_text = [], [], []
for node in nodes:
    nid = node_ids[node]
    x, y = positions[nid]
    node_x.append(x)
    node_y.append(y)
    node_text.append(node.name)

fig = go.Figure()

# Edge lines
fig.add_trace(go.Scatter(
    x=edge_x, y=edge_y,
    mode='lines',
    line=dict(width=1.5, color='gray'),
    hoverinfo='none'
))

# Node markers and labels
fig.add_trace(go.Scatter(
    x=node_x, y=node_y,
    mode='markers+text',
    marker=dict(size=40, color='lightblue'),
    text=node_text,
    textposition="middle center",
    hoverinfo='text'
))

fig.update_layout(
    title="Circular Economy - Decision Tree Layout (Clean Spacing)",
    showlegend=False,
    xaxis=dict(showticklabels=False, zeroline=False),
    yaxis=dict(showticklabels=False, zeroline=False),
    margin=dict(l=20, r=20, t=50, b=20),
    height=800
)

fig.show()
