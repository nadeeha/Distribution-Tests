import matplotlib.pyplot as plt
import seaborn as sns
import textwrap

def generate_plots_cleanly(original_data, outlier_data, imputed_data, columns, folder_name, task, additional_dataframes):
    """
    Generate clean plots with summaries displayed separately below the plots.

    Args:
    - original_data: DataFrame before imputation.
    - outlier_data: DataFrame containing outlier values.
    - imputed_data: DataFrame after imputation.
    - columns: List of column names to process.
    - folder_name: Folder to save the plots.
    - task: Task name to include in plot titles.
    - additional_dataframes: A dictionary of additional DataFrames to display relevant rows.
    """
    def summarize_data(col, df, heading):
        """Helper function to summarize rows from a DataFrame."""
        if "attributes" in df.columns and col in df["attributes"].values:
            filtered_rows = df[df["attributes"] == col]
            summary = f"{heading}:\n" + "\n".join(
                [f"{header}: {', '.join(map(str, filtered_rows[header].dropna().unique()))}" 
                 for header in filtered_rows.columns if header != "attributes"]
            )
            return summary
        return f"{heading}: No relevant data found for {col}"

    for col in columns:
        # Create a new figure with extra space for text
        fig = plt.figure(figsize=(18, 22))
        grid = plt.GridSpec(4, 3, hspace=0.8)  # 4 rows, 3 columns grid with extra vertical spacing

        # Plot 1: Histogram Before Imputation
        ax1 = fig.add_subplot(grid[0, 0])
        sns.histplot(original_data[col], kde=False, color="black", bins=20, ax=ax1)
        ax1.set_title(f"Histogram (Before {task}): {col}")
        ax1.set_xlabel(col)
        ax1.set_ylabel("Frequency")

        # Plot 2: Histogram Outliers
        ax2 = fig.add_subplot(grid[0, 1])
        sns.histplot(outlier_data[col], kde=False, color="blue", bins=20, ax=ax2)
        ax2.set_title(f"Histogram (Outliers {task}): {col}")
        ax2.set_xlabel(col)
        ax2.set_ylabel("Frequency")

        # Plot 3: Histogram After Imputation
        ax3 = fig.add_subplot(grid[0, 2])
        sns.histplot(imputed_data[col], kde=False, color="red", bins=20, ax=ax3)
        ax3.set_title(f"Histogram (After {task}): {col}")
        ax3.set_xlabel(col)
        ax3.set_ylabel("Frequency")

        # Plot 4: Box Plot Before Imputation
        ax4 = fig.add_subplot(grid[1, 0])
        sns.boxplot(x=original_data[col], color="black", ax=ax4)
        ax4.set_title(f"Box Plot (Before {task}): {col}")

        # Plot 5: Box Plot Outliers
        ax5 = fig.add_subplot(grid[1, 1])
        sns.boxplot(x=outlier_data[col], color="blue", ax=ax5)
        ax5.set_title(f"Box Plot (Outliers {task}): {col}")

        # Plot 6: Box Plot After Imputation
        ax6 = fig.add_subplot(grid[1, 2])
        sns.boxplot(x=imputed_data[col], color="red", ax=ax6)
        ax6.set_title(f"Box Plot (After {task}): {col}")

        # Plot 7: KDE Plot Before Imputation
        ax7 = fig.add_subplot(grid[2, 0])
        sns.kdeplot(original_data[col], color="black", ax=ax7)
        ax7.set_title(f"KDE Plot (Before {task}): {col}")
        ax7.set_xlabel(col)
        ax7.set_ylabel("Density")

        # Plot 8: KDE Plot Outliers
        ax8 = fig.add_subplot(grid[2, 1])
        sns.kdeplot(outlier_data[col], color="blue", ax=ax8)
        ax8.set_title(f"KDE Plot (Outliers {task}): {col}")
        ax8.set_xlabel(col)
        ax8.set_ylabel("Density")

        # Plot 9: KDE Plot After Imputation
        ax9 = fig.add_subplot(grid[2, 2])
        sns.kdeplot(imputed_data[col], color="red", ax=ax9)
        ax9.set_title(f"KDE Plot (After {task}): {col}")
        ax9.set_xlabel(col)
        ax9.set_ylabel("Density")

        # Summary Text Below the Plots
        ax_text = fig.add_subplot(grid[3, :])
        summaries = [
            summarize_data(col, additional_dataframes["original"], "Summary of Original Data"),
            summarize_data(col, additional_dataframes["outliers"], "Summary of Outlier Data"),
            summarize_data(col, additional_dataframes["imputed"], "Summary of Imputed Data"),
        ]
        ax_text.axis("off")  # Turn off the axis
        ax_text.text(
            0.01, 0.8, "\n\n".join(summaries), fontsize=10, ha="left", va="top", wrap=True
        )

        # Save the figure
        plt.savefig(f"{folder_name}/{col}_plots.png")
        plt.close()
