import pandas as pd
import re

# Step 1: Load the CSV with all columns as strings
df = pd.read_csv("your_file.csv", dtype=str)

# Step 2: Define a function to detect and convert dates back to ranges
def fix_date_format(value):
    if isinstance(value, str):
        # Check if it looks like a date
        if re.match(r"^\d{1,2}-[A-Za-z]+$", value):
            # Example: convert '4-Mar' back to '3-4' or similar
            # Split the date-formatted string and retain only the day part
            day = re.match(r"^\d{1,2}", value).group(0)
            # Assuming that the month part represents the original range end, retrieve it
            end_range = str(int(day) + 1)  # Adjust end of range as needed
            return f"{day}-{end_range}"
    return value

# Step 3: Apply this function to the relevant column(s)
df['column_name'] = df['column_name'].apply(fix_date_format)

print(df['column_name'])  # Verify the column content






import pandas as pd
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
import seaborn as sns

# Load the data
iea_data = pd.read_csv("iea_clean_technology_guide.csv")
rbics_data = pd.read_csv("rbics_l6_categories.csv")

# Basic checks
print(iea_data.info())
print(rbics_data.info())

# Missing values
print("IEA missing values:\n", iea_data.isna().sum())
print("RBICS missing values:\n", rbics_data.isna().sum())

# Description length analysis
iea_data['description_length'] = iea_data['description'].apply(lambda x: len(str(x)))
rbics_data['description_length'] = rbics_data['description'].apply(lambda x: len(str(x)))

plt.figure(figsize=(10, 6))
sns.histplot(iea_data['description_length'], kde=True, label="IEA Description Length")
sns.histplot(rbics_data['description_length'], kde=True, color="orange", label="RBICS Description Length")
plt.legend()
plt.title("Description Length Distribution")
plt.show()

# Sector distribution in IEA data
plt.figure(figsize=(12, 6))
iea_data['sector'].value_counts().plot(kind='bar')
plt.title("Sector Distribution in IEA Data")
plt.show()

# Top keywords in descriptions using CountVectorizer
vectorizer = CountVectorizer(stop_words='english', max_features=10)
iea_keywords = vectorizer.fit_transform(iea_data['description'].fillna(""))
rbics_keywords = vectorizer.fit_transform(rbics_data['description'].fillna(""))

print("Top keywords in IEA Descriptions:", vectorizer.get_feature_names_out())
print("Top keywords in RBICS Descriptions:", vectorizer.get_feature_names_out())



import plotly.graph_objects as go

fig = go.Figure()
fig.add_trace(go.Histogram(x=iea_data['description_length'], name="IEA Descriptions"))
fig.add_trace(go.Histogram(x=rbics_data['description_length'], name="RBICS Descriptions"))
fig.update_layout(barmode='overlay', title="Description Length Distribution", xaxis_title="Description Length", yaxis_title="Count")
fig.update_traces(opacity=0.6)
fig.show()

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Generate word cloud for IEA descriptions
text = " ".join(iea_data['description'].dropna().tolist())
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)

# Plot Word Cloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.title("IEA Descriptions - Word Cloud")
plt.show()


import plotly.express as px

# Assuming df_iea is your DataFrame and theme is the column with 35 unique themes
# Replace `your_custom_color` with the color you want to use for the bars
custom_color = 'your_custom_color'  # Define your custom color here

fig = px.bar(df_iea['theme'].value_counts().reset_index(),
             x='index', y='theme',
             title="Theme Distribution in IEA Data",
             labels={'index': 'Theme', 'theme': 'Count'})

# Use custom color and improve readability
fig.update_traces(marker_color=custom_color)
fig.update_layout(xaxis={'categoryorder':'total descending'}, xaxis_tickangle=-45)
fig.show()


import streamlit as st
import plotly.express as px

# Load your preprocessed DataFrame
# df_iea = pd.read_csv("path/to/your/data.csv")  # Uncomment if loading from a CSV

# Dropdown for selecting a technology
selected_tech = st.selectbox("Select a Technology", df_iea['name'].unique())

# Filter data for the selected technology
filtered_data = df_iea[df_iea['name'] == selected_tech]

# Prepare data for plotting
trl_values = [filtered_data['trl2020'].values[0], filtered_data['trl2021'].values[0],
              filtered_data['trl2022'].values[0], filtered_data['trl2023'].values[0]]
years = ['2020', '2021', '2022', '2023']

# Plotting
fig = px.line(x=years, y=trl_values, title=f"TRL Over Time for {selected_tech}",
              labels={'x': 'Year', 'y': 'Technology Readiness Level'})

# Display the plot
st.plotly_chart(fig)





import pandas as pd

# Example data setup (replace with actual DataFrame)
# Assume df_iea has columns: 'name', 'trl2020', 'trl2021', 'trl2022', 'trl2023'

def convert_trl(value):
    if isinstance(value, str) and '-' in value:  # Check if it's a range
        start, end = map(float, value.split('-'))
        return (start + end) / 2
    else:
        return float(value)  # Convert single values to float directly

# Apply conversion to each TRL column
for col in ['trl2020', 'trl2021', 'trl2022', 'trl2023']:
    df_iea[col] = df_iea[col].apply(convert_trl)



import pandas as pd
import re
import spacy
from nltk.corpus import stopwords

# Load spaCy English model
nlp = spacy.load('en_core_web_sm')
stop_words = set(stopwords.words('english'))

# Sample DataFrames (replace with your actual data)
# df_iea = pd.read_csv("path/to/df_iea.csv")
# df_rbics = pd.read_csv("path/to/df_rbics.csv")

# Columns to combine for each DataFrame
iea_text_columns = ['name', 'description', 'NZErationale', 'theme']
rbics_text_columns = ['name', 'description']

# Define a function to apply all preprocessing steps including lemmatization
def preprocess_text(text):
    text = text.lower()  # Lowercase
    text = re.sub(r'[^\w\s|]', '', text)  # Remove punctuation except "|"
    text = ' '.join(word for word in text.split() if word not in stop_words)  # Remove stop words

    # Lemmatization with spaCy
    doc = nlp(text)
    text = ' '.join(token.lemma_ for token in doc if token.lemma_ != "-PRON-")  # Skip pronouns
    text = text.strip()  # Remove extra whitespaces
    return text

# Combine columns and apply preprocessing for df_iea
df_iea['combined_text'] = (
    "Name: " + df_iea['name'].fillna('') + " | " +
    "Description: " + df_iea['description'].fillna('') + " | " +
    "NZErationale: " + df_iea['NZErationale'].fillna('') + " | " +
    "Theme: " + df_iea['theme'].fillna('')
).apply(preprocess_text)

# Combine columns and apply preprocessing for df_rbics
df_rbics['combined_text'] = (
    "Name: " + df_rbics['name'].fillna('') + " | " +
    "Description: " + df_rbics['description'].fillna('')
).apply(preprocess_text)

# Check the resulting combined and preprocessed columns
print(df_iea[['combined_text']].head())
print(df_rbics[['combined_text']].head())





import pandas as pd

# Sample Data
data = {
    'iea_name': ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B'],
    'relevance_flag': ['Low', 'Low', 'Low', 'Low', 'Low', 'Very Low', 'Very Low', 'Very Low', 'Very Low', 'Very Low', 'High', 'Moderate', 'Low', 'Very Low'],
    'similarity_score': [0.80, 0.78, 0.76, 0.75, 0.74, 0.70, 0.68, 0.67, 0.66, 0.65, 0.90, 0.85, 0.83, 0.60]
}

df = pd.DataFrame(data)

# Function to apply the filtering logic
def filter_relevance(df):
    # Check for High and Moderate values
    high_moderate = df[df['relevance_flag'].isin(['High', 'Moderate'])]
    
    # Check if we have any High or Moderate values
    if not high_moderate.empty:
        # Get top 5 Low values based on similarity_score
        low = df[df['relevance_flag'] == 'Low'].nlargest(5, 'similarity_score')
        
        # Get top 5 Very Low values based on similarity_score
        very_low = df[df['relevance_flag'] == 'Very Low'].nlargest(5, 'similarity_score')
        
        # Combine all results
        result = pd.concat([high_moderate, low, very_low])
    
    else:
        # No High or Moderate, so only get Low and Very Low
        low = df[df['relevance_flag'] == 'Low'].nlargest(5, 'similarity_score')
        very_low = df[df['relevance_flag'] == 'Very Low'].nlargest(5, 'similarity_score')
        
        # If no Low values are present, just get Very Low
        if low.empty and not very_low.empty:
            result = very_low
        else:
            result = pd.concat([low, very_low])
    
    # Sort final result by similarity_score in descending order
    return result.sort_values(by='similarity_score', ascending=False)

# Apply the function to each iea_name group
result = df.groupby('iea_name', group_keys=False).apply(filter_relevance)

# Display the result
print(result)


import plotly.express as px

# Plotly interactive scatter plot
fig = px.scatter(
    df,
    x="iea_id",
    y="similarity_score",
    color="relevance_flag",
    hover_data=["rbics_id", "iea_description", "rbics_description"],
    title="IEA to RBICS Mappings by Similarity Score and Relevance Flag"
)
fig.update_layout(xaxis_title="IEA ID", yaxis_title="Similarity Score")
fig.show()





import streamlit as st
import pandas as pd
import plotly.express as px

# Load data
df = pd.read_csv('your_file.csv')

# Sidebar filter for IEA ID
iea_id = st.sidebar.selectbox("Select IEA ID", df['iea_id'].unique())

# Filter data based on selected IEA ID
filtered_df = df[df['iea_id'] == iea_id]

# Plot
fig = px.scatter(
    filtered_df,
    x="rbics_id",
    y="similarity_score",
    color="relevance_flag",
    hover_data=["iea_description", "rbics_description"],
    title=f"Mappings for IEA ID: {iea_id}",
    labels={"rbics_id": "RBICS ID", "similarity_score": "Similarity Score"}
)
fig.update_layout(xaxis_title="RBICS ID", yaxis_title="Similarity Score")

# Display plot in Streamlit app
st.plotly_chart(fig)





import streamlit as st
import pandas as pd
import plotly.express as px

# Load data
df = pd.read_csv('your_file.csv')

# Sidebar filter for IEA ID
iea_id = st.sidebar.selectbox("Select IEA ID", df['iea_id'].unique())

# Filter data based on selected IEA ID
filtered_df = df[df['iea_id'] == iea_id]

# Customize hover text by combining descriptions into one field
filtered_df['hover_text'] = (
    "IEA Description: " + filtered_df['iea_description'] + "<br>" +
    "RBICS Description: " + filtered_df['rbics_description']
)

# Plot with larger size and customized hover text
fig = px.scatter(
    filtered_df,
    x="rbics_id",
    y="similarity_score",
    color="relevance_flag",
    hover_name="hover_text",  # Display combined hover text
    title=f"Mappings for IEA ID: {iea_id}",
    labels={"rbics_id": "RBICS ID", "similarity_score": "Similarity Score"}
)

# Increase the layout size for better visibility
fig.update_layout(
    width=1000,  # Adjust width as needed
    height=600,  # Adjust height as needed
    hoverlabel=dict(font_size=14)  # Increase hover text font size
)

# Display plot in Streamlit app
st.plotly_chart(fig)



import streamlit as st
import pandas as pd
import plotly.express as px

# Load data
df = pd.read_csv('your_file.csv')

# Sidebar filter for IEA ID
iea_id = st.sidebar.selectbox("Select IEA ID", df['iea_id'].unique())

# Filter data based on selected IEA ID
filtered_df = df[df['iea_id'] == iea_id]

# Customize hover text to include full descriptions
filtered_df['hover_text'] = (
    "IEA Description: " + filtered_df['iea_description'] + "<br>" +
    "RBICS Description: " + filtered_df['rbics_description']
)

# Plot with hovertemplate to control full hover text visibility
fig = px.scatter(
    filtered_df,
    x="rbics_id",
    y="similarity_score",
    color="relevance_flag",
    title=f"Mappings for IEA ID: {iea_id}",
    labels={"rbics_id": "RBICS ID", "similarity_score": "Similarity Score"}
)

# Apply hovertemplate for full hover text display
fig.update_traces(
    hovertemplate="<b>%{text}</b><extra></extra>",
    text=filtered_df['hover_text']  # Use hover_text for full description
)

# Increase the layout size for better visibility
fig.update_layout(
    width=1000,
    height=600,
    hoverlabel=dict(font_size=14)
)

# Display plot in Streamlit app
st.plotly_chart(fig)





import streamlit as st
import pandas as pd
import plotly.express as px

# Load data from the provided file path
df = pd.read_csv('/mnt/data/file-HU7XOXsitH6xW7fVfJeWFFnq')

# Sidebar filter for IEA ID
iea_id = st.sidebar.selectbox("Select IEA ID", df['iea_id'].unique())

# Filter data based on selected IEA ID
filtered_df = df[df['iea_id'] == iea_id]

# Format hover text with line breaks and limited length
def format_hover_text(row):
    iea_desc = row['iea_description'][:100] + "..." if len(row['iea_description']) > 100 else row['iea_description']
    rbics_desc = row['rbics_description'][:100] + "..." if len(row['rbics_description']) > 100 else row['rbics_description']
    return f"IEA Description: {iea_desc}<br>RBICS Description: {rbics_desc}"

filtered_df['hover_text'] = filtered_df.apply(format_hover_text, axis=1)

# Create scatter plot with customized hover text
fig = px.scatter(
    filtered_df,
    x="rbics_id",
    y="similarity_score",
    color="relevance_flag",
    title=f"Mappings for IEA ID: {iea_id}",
    labels={"rbics_id": "RBICS ID", "similarity_score": "Similarity Score"}
)

# Use hovertemplate to control how hover text displays
fig.update_traces(
    hovertemplate="<b>%{text}</b><extra></extra>",  # Custom hovertemplate to display full text
    text=filtered_df['hover_text']  # Display combined, formatted hover text
)

# Adjust hover label font size and color
fig.update_layout(
    width=1200,  # Increase plot width to prevent truncation
    height=700,
    hoverlabel=dict(
        font_size=12,   # Set font size for hover text
        font_family="Arial"  # Optionally set a font family
    )
)

# Display plot in Streamlit app
st.plotly_chart(fig)


import streamlit as st
import pandas as pd
import plotly.express as px

# Load data from the provided file path
df = pd.read_csv('/mnt/data/file-HU7XOXsitH6xW7fVfJeWFFnq')

# Sidebar filter for IEA ID
iea_id = st.sidebar.selectbox("Select IEA ID", df['iea_id'].unique())

# Function to add line breaks to the text at regular intervals
def add_line_breaks(text, interval=50):
    return '<br>'.join([text[i:i+interval] for i in range(0, len(text), interval)])

# Apply the line break function to the description columns
df['formatted_iea_description'] = df['iea_description'].apply(lambda x: add_line_breaks(x, 50))
df['formatted_rbics_description'] = df['rbics_description'].apply(lambda x: add_line_breaks(x, 50))

# Combine formatted descriptions into hover text
df['hover_text'] = (
    "IEA Description: " + df['formatted_iea_description'] + 
    "<br>RBICS Description: " + df['formatted_rbics_description']
)

# Filter data based on selected IEA ID
filtered_df = df[df['iea_id'] == iea_id]

# Create scatter plot with customized hover text
fig = px.scatter(
    filtered_df,
    x="rbics_id",
    y="similarity_score",
    color="relevance_flag",
    title=f"Mappings for IEA ID: {iea_id}",
    labels={"rbics_id": "RBICS ID", "similarity_score": "Similarity Score"}
)

# Use hovertemplate to display the formatted hover text
fig.update_traces(
    hovertemplate="<b>%{text}</b><extra></extra>",  # Custom hovertemplate to display full text
    text=filtered_df['hover_text']  # Use hover_text with line breaks
)

# Adjust layout size and hover text appearance
fig.update_layout(
    width=1200,  # Increase plot width if necessary
    height=700,
    hoverlabel=dict(
        font_size=12,   # Set font size for readability
        font_family="Arial"  # Optionally set a font family
    )
)

# Display plot in Streamlit app
st.plotly_chart(fig)
