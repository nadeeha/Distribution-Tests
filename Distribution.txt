import pandas as pd
import plotly.graph_objects as go

# Assume df is already defined with ISIN, ETF-Index Name, SECTOR, weight, market_cap

# --- Step 1: Dedup to avoid double-counting per ETF-ISIN-SECTOR
df_unique = df[['ISIN', 'ETF-Index Name', 'SECTOR', 'weight', 'market_cap']].drop_duplicates()

# --- Step 2: Metric 1a - ISIN count / ETF total ISINs
isin_count = df_unique.groupby(['SECTOR', 'ETF-Index Name'])['ISIN'].nunique().unstack(fill_value=0)
total_isin_per_etf = isin_count.sum(axis=0)
metric_1a = isin_count.divide(total_isin_per_etf, axis=1)

# --- Step 3: Metric 1b - ISIN count / SECTOR total ISINs
total_isin_per_sector = isin_count.sum(axis=1)
metric_1b = isin_count.divide(total_isin_per_sector, axis=0)

# --- Step 4: Metric 2a - Weight sum / ETF total weight
weight_sum = df_unique.groupby(['SECTOR', 'ETF-Index Name'])['weight'].sum().unstack(fill_value=0)
total_weight_per_etf = weight_sum.sum(axis=0)
metric_2a = weight_sum.divide(total_weight_per_etf, axis=1)

# --- Step 5: Metric 2b - Market Cap sum / ETF total Market Cap
mcap_sum = df_unique.groupby(['SECTOR', 'ETF-Index Name'])['market_cap'].sum().unstack(fill_value=0)
total_mcap_per_etf = mcap_sum.sum(axis=0)
metric_2b = mcap_sum.divide(total_mcap_per_etf, axis=1)

# --- Step 6: Create plotly heatmaps
fig = go.Figure()

metrics = {
    "Metric 1a - ISIN / ETF": metric_1a,
    "Metric 1b - ISIN / Sector": metric_1b,
    "Metric 2a - Weight %": metric_2a,
    "Metric 2b - Market Cap %": metric_2b,
}

for i, (title, data) in enumerate(metrics.items()):
    fig.add_trace(
        go.Heatmap(
            z=data.values,
            x=data.columns,
            y=data.index,
            colorscale='Viridis',
            visible=(i == 0),
            colorbar=dict(title=title),
            zmin=0,
            zmax=1
        )
    )

# --- Step 7: Add dropdown to toggle metrics
dropdown_buttons = [
    dict(label=title,
         method='update',
         args=[{'visible': [i == j for j in range(len(metrics))]},
               {'title': title}])
    for i, title in enumerate(metrics.keys())
]

fig.update_layout(
    title='ETF Sector Metrics Heatmap',
    updatemenus=[dict(
        active=0,
        buttons=dropdown_buttons,
        direction='down',
        showactive=True,
        x=0.5,
        xanchor='center',
        y=1.15,
        yanchor='top'
    )],
    margin=dict(t=100)
)

# --- Step 8: Save to HTML
fig.write_html("heatmap_metrics.html")
