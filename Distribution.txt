import pandas as pd
import plotly.express as px

# Simulated dfs_dict â€” replace with your actual ETF data
dfs_dict = {
    'xaix_gt': pd.DataFrame({
        'ISIN': ['A1', 'A2', 'A3', 'A4', 'A5', 'A6'],
        'ETF-Index Name': ['XAIX Global Tech'] * 6
    }),
    'lock_ln': pd.DataFrame({
        'ISIN': ['B1', 'B2', 'B3', 'B4', 'B5', 'B6'],
        'ETF-Index Name': ['LOCK Defense Leaders'] * 6
    })
}

# Define custom display order
custom_order = ['LOCK Defense Leaders', 'XAIX Global Tech']

# Count unique ISINs (stocks) per ETF
stock_counts = []
for key, df in dfs_dict.items():
    etf_name = df['ETF-Index Name'].iloc[0]
    unique_stocks = df['ISIN'].drop_duplicates().nunique()
    stock_counts.append({'ETF-Index Name': etf_name, 'Number of Stocks': unique_stocks})

# Convert to DataFrame
stock_df = pd.DataFrame(stock_counts)

# Apply custom order to ETF-Index Name
stock_df['ETF-Index Name'] = pd.Categorical(stock_df['ETF-Index Name'], categories=custom_order, ordered=True)

# Create the bar chart
fig = px.bar(
    stock_df,
    x='ETF-Index Name',
    y='Number of Stocks',
    text='Number of Stocks',
    title='Total Number of Unique Stocks per ETF',
    labels={'ETF-Index Name': 'ETF'}
)

fig.update_traces(textposition='outside')
fig.update_layout(
    xaxis_title='ETF Name',
    yaxis_title='Number of Stocks',
    bargap=0.4
)

fig.show()
