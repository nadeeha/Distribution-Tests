import os
import base64

def generate_html_with_images(folder_paths, output_html):
    html_content = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Image Gallery</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                text-align: center;
            }
            img {
                margin: 10px;
                max-width: 300px;
                max-height: 300px;
            }
        </style>
    </head>
    <body>
        <h1>Image Gallery</h1>
    """

    for folder_path in folder_paths:
        html_content += f"<h2>{os.path.basename(folder_path)}</h2>\n"
        for filename in os.listdir(folder_path):
            if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                file_path = os.path.join(folder_path, filename)
                with open(file_path, "rb") as img_file:
                    encoded_string = base64.b64encode(img_file.read()).decode('utf-8')
                    img_format = filename.split('.')[-1].lower()
                    html_content += f'<img src="data:image/{img_format};base64,{encoded_string}" alt="{filename}">\n'

    html_content += """
    </body>
    </html>
    """

    # Write the HTML content to the output file
    with open(output_html, "w", encoding="utf-8") as html_file:
        html_file.write(html_content)
    print(f"HTML file created: {output_html}")

# Specify the folders containing images and the output HTML file
folders = ["path_to_folder1", "path_to_folder2"]  # Add paths to your image folders
output_file = "image_gallery.html"

# Generate the HTML
generate_html_with_images(folders, output_file)



import seaborn as sns
import textwrap
import matplotlib.pyplot as plt

# Box Plot Before Imputation
plt.subplot(3, 2, 3)
if not original_data[col].dropna().empty:  # Check if the column has non-NaN values
    sns.boxplot(x=original_data[col], color='black')
    wrapped_title = "\n".join(textwrap.wrap(f'Box Plot (Before {task}): {col}', width=50))  # Adjust width here
    plt.title(wrapped_title)
else:
    plt.text(0.5, 0.5, f'No data available for {col}', horizontalalignment='center', verticalalignment='center')
    plt.title(f'Box Plot (Before {task}): {col}')

# Box Plot After Imputation
plt.subplot(3, 2, 4)
if not imputed_data[col].dropna().empty:  # Check if the column has non-NaN values
    sns.boxplot(x=imputed_data[col], color='red')
    wrapped_title = "\n".join(textwrap.wrap(f'Box Plot (After {task}): {col}', width=50))  # Adjust width here
    plt.title(wrapped_title)
else:
    plt.text(0.5, 0.5, f'No data available for {col}', horizontalalignment='center', verticalalignment='center')
    plt.title(f'Box Plot (After {task}): {col}')
