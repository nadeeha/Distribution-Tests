import numpy as np
from scipy.stats import norm

def generate_plots_before_after(original_data, imputed_data, columns, folder_name, task):
    for col in columns:
        # Create a new figure for each column
        plt.figure(figsize=(18, 12))

        # Histogram Before Imputation
        plt.subplot(3, 2, 1)
        sns.histplot(original_data[col], kde=False, color='blue', bins=20)
        # Adding Normal Distribution as a Dotted Line
        mean, std = original_data[col].mean(), original_data[col].std()
        x = np.linspace(mean - 3*std, mean + 3*std, 100)
        plt.plot(x, norm.pdf(x, mean, std) * len(original_data[col]), 
                 color='red', linestyle='dotted', label='Normal Dist.')
        plt.legend()
        wrapped_title = "\n".join(textwrap.wrap(f"Histogram (Before {task}): {col}", width=50))  # Adjust width here
        plt.title(wrapped_title)
        plt.xlabel(col)
        plt.ylabel('Frequency')

        # Histogram After Imputation
        plt.subplot(3, 2, 2)
        sns.histplot(imputed_data[col], kde=False, color='green', bins=20)
        # Adding Normal Distribution as a Dotted Line
        mean_imp, std_imp = imputed_data[col].mean(), imputed_data[col].std()
        x_imp = np.linspace(mean_imp - 3*std_imp, mean_imp + 3*std_imp, 100)
        plt.plot(x_imp, norm.pdf(x_imp, mean_imp, std_imp) * len(imputed_data[col]), 
                 color='red', linestyle='dotted', label='Normal Dist.')
        plt.legend()
        wrapped_title = "\n".join(textwrap.wrap(f"Histogram (After {task}): {col}", width=50))  # Adjust width here
        plt.title(wrapped_title)
        plt.xlabel(col)
        plt.ylabel('Frequency')

        # Box Plot Before Imputation
        plt.subplot(3, 2, 3)
        sns.boxplot(x=original_data[col], color='blue')
        plt.title(f"Box Plot (Before {task}): {col}")
        plt.xlabel(col)

        # Box Plot After Imputation
        plt.subplot(3, 2, 4)
        sns.boxplot(x=imputed_data[col], color='green')
        plt.title(f"Box Plot (After {task}): {col}")
        plt.xlabel(col)

        # Show plots
        plt.tight_layout()
        plt.show()
